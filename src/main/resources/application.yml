server:
  port: 8080
  servlet:
    context-path: /v1
    encoding:
      charset: UTF-8
      enabled: true
      force: true

spring:
  datasource:
    url: jdbc:mysql://${DB_HOST}:${DB_PORT}/${DB_DATABASE}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: create # 추후 none 변경
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true # console 창에 보여줄때 format 여부
        show_sql: true  # sql query console 창에 표시 여부

  security:
    oauth2:
      client:
        registration:
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${NAVER_REDIRECT_URL}
            scope:
              - profile
              - email
              - profile_image
            client-name: Naver
            authorization-grant-type: authorization_code

          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            redirect-uri: ${KAKAO_REDIRECT_URL}
            scope:
              - profile_nickname
              - profile_image
            client-name: Kakao
            authorization-grant-type: authorization_code

        # authorization-uri: OAuth 인증을 위한 로그인 URL
        # token-uri: 액세스 토큰을 발급받기 위한 URL
        # user-info-uri: 사용자 정보에 접근하기 위한 URL
        # user-name-attribute: 사용자 정보 응답 JSON 에서 사용자 정보를 포함하는 필드 이름
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

jwt:
  secret: ${JWT_SECRET_KEY} # JWT 서명을 위한 시크릿 키
  access-expiration-seconds: ${ACCESS_EXPIRATION_SECONDS} # access token 만료 시간
  refresh-expiration-seconds: ${REFRESH_EXPIRATION_SECONDS} # refresh token 만료 시간

external:
  api:
    business-status:
      url: https://api.odcloud.kr/api/nts-businessman/v1/status
      service-key: ${BUSINESS_SERVICE_KEY}

springdoc:
  path: /swagger-ui/index.html
  swagger-ui:
    tags-sorter: default
    operations-sorter: method


# TODO: 삭제 후 배포
logging:
  level:
    org.springframework.security: debug
    org.hibernate.orm.jdbc.bind: trace