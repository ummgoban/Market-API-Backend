name: Build and Push Docker Images

# dev 브랜치에 push 될때 작동
on:
  push:
    branches:
      - dev

jobs:
  build-image-and-push:
    runs-on: ubuntu-latest
    # 권한을 read로 제한
    permissions:
      contents: read
    # jdk 17 설정
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
      # gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0
      # 멀티플랫폼 이미지 빌드 환경 설정
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      # 멀티플랫폼 이미지 빌드 환경 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # 스프링부트 빌드
      - name: 스프링부트 애플리케이션 빌드
        run: |
          chmod +x ./gradlew
          ./gradlew bootJar
      # 도커 이미지 빌드
      - name: 도커 이미지 빌드
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/market-image:latest --platform linux/amd64 .
      # dockerhub 에 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # 도커 이미지 push
      - name: 도커 이미지 push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/market-image:latest
      # 서버에 .env 파일 생성
      - name: Set ".env" for configuration at NCP Server
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SERVER_USERNAME }} # 아이디
          host: ${{ secrets.SERVER_IP }}
          password: ${{ secrets.SERVER_PASSWORD }} # 비밀번호
          script: |
            rm -rf ./.env
            touch ./.env
        
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> ./.env
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> ./.env
            echo "DB_PORT=${{ secrets.DB_PORT }}" >> ./.env
            echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> ./.env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> ./.env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ./.env
            echo "NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}" >> ./.env
            echo "NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}" >> ./.env
            echo "NAVER_REDIRECT_URL=${{ secrets.NAVER_REDIRECT_URL }}" >> ./.env
            echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> ./.env
            echo "KAKAO_REDIRECT_URL=${{ secrets.KAKAO_REDIRECT_URL }}" >> ./.env
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> ./.env
            echo "AWS_S3_ACCESS_KEY=${{ secrets.AWS_S3_ACCESS_KEY }}" >> ./.env
            echo "AWS_S3_SECRET_KEY=${{ secrets.AWS_S3_SECRET_KEY }}" >> ./.env
            echo "REFRESH_EXPIRATION_SECONDS=${{ secrets.REFRESH_EXPIRATION_SECONDS }}" >> ./.env
            echo "ACCESS_EXPIRATION_SECONDS=${{ secrets.ACCESS_EXPIRATION_SECONDS }}" >> ./.env
            echo "BUSINESS_SERVICE_KEY=${{ secrets.BUSINESS_SERVICE_KEY }}" >> ./.env


      # 권한 부여 후 gradle build
      - name: Set Gradle build Permission
        run: chmod +x gradlew

      - name: Gradle build
        run: ./gradlew build

      - uses: actions/checkout@v4
      - name: Copy docker-compose file in ec2 via ssh password
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          source: "./docker-compose.yml"
          target: "/root"

      - name: Depoly to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          script: |
            cd ~
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
            docker stop $(docker ps -a -q) 
            docker rm -f $(docker ps -qa)
            chmod +x docker-compose.yml
            docker-compose pull
            docker-compose up -d
            docker image prune -f
